{"version":3,"sources":["models/fetch-gifs-state.model.ts","models/gif-image.model.ts","hooks/use-fetch-gifs.hook.ts","utils/get-gif-images.util.ts","components/grid-item.component.tsx","components/gif-grid.component.tsx","components/search-form.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FetchGifsState","args","loading","images","Object","assign","this","GifImage","id","title","url","downsized_medium","useFetchGifs","category","useState","state","setState","useEffect","subscription$","replace","encodeURI","fromFetch","pipe","switchMap","response","ok","from","json","throwError","pluck","map","data","row","catchError","err","console","error","of","getGifImages","subscribe","next","unsubscribe","GridItemComponent","className","crossOrigin","src","alt","GifGridComponent","image","SearchFormComponent","setCategories","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","prevCategories","type","value","onChange","e","target","App","categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c8a1012.chunk.js","sourcesContent":["import { GifImage } from './gif-image.model';\n\nexport class FetchGifsState {\n  loading = true;\n  images: GifImage[] = [];\n\n  constructor(args: Partial<FetchGifsState> = {}) {\n    Object.assign(this, args);\n  }\n}\n","export class GifImage {\n  id: string;\n  title: string;\n  url: string;\n\n  constructor(args: GifImage & any = {}) {\n    this.id = args.id;\n    this.title = args.title;\n    this.url = args.images.downsized_medium.url;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { FetchGifsState } from '../models/fetch-gifs-state.model';\nimport { getGifImages } from '../utils/get-gif-images.util';\n\nexport function useFetchGifs(category: string) {\n  const [state, setState] = useState(new FetchGifsState());\n\n  useEffect(() => {\n    const subscription$ = getGifImages(category).subscribe({\n      next: images => {\n        setState(new FetchGifsState({ loading: false, images }));\n        subscription$.unsubscribe();\n      },\n    });\n  }, [category]);\n\n  return state;\n}\n","import { from, of, throwError } from 'rxjs';\nimport { fromFetch } from 'rxjs/fetch';\nimport { catchError, map, pluck, switchMap } from 'rxjs/operators';\nimport { GifImage } from '../models/gif-image.model';\n\nexport function getGifImages(category: string) {\n  const baseUrl =\n    'https://api.giphy.com/v1/gifs/search?q=:category&limit=10&api_key=A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K';\n  const url = baseUrl.replace(':category', encodeURI(category));\n\n  return fromFetch(url)\n    .pipe(\n      switchMap(response => {\n        return response.ok ? from(response.json()) : throwError(response);\n      }),\n    )\n    .pipe(\n      pluck('data'),\n      map<any, GifImage[]>((data: any[]) =>\n        data.map((row: any) => new GifImage(row)),\n      ),\n    )\n    .pipe(\n      catchError(err => {\n        // Network or other error, handle appropriately\n        console.error(err);\n        return of([]);\n      }),\n    );\n}\n","import React from 'react';\n\nexport interface GridItemProps {\n  title: string;\n  url: string;\n}\n\nexport function GridItemComponent({ title, url }: GridItemProps) {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img crossOrigin=\"anonymous\" src={url} alt={title} />\n      <p> {title} </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/use-fetch-gifs.hook';\nimport { GridItemComponent } from './grid-item.component';\n\nexport interface GifGridProps {\n  category: string;\n}\n\nexport function GifGridComponent({ category }: GifGridProps) {\n  const { images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <div className=\"card-grid\">\n        {images.map(image => (\n          <GridItemComponent key={image.id} {...image} />\n        ))}\n      </div>\n    </>\n  );\n}\n","import React, { FormEvent, useState } from 'react';\n\nexport interface SearchFormProps {\n  setCategories: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nexport function SearchFormComponent({ setCategories }: SearchFormProps) {\n  const [inputValue, setInputValue] = useState('');\n\n  const formSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(prevCategories => [inputValue, ...prevCategories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={formSubmit}>\n      <p> {inputValue} </p>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={e => setInputValue(e.target.value)}\n      />\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { GifGridComponent } from './components/gif-grid.component';\nimport { SearchFormComponent } from './components/search-form.component';\n\nexport function App() {\n  const [categories, setCategories] = useState<string[]>([]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <SearchFormComponent setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map(category => (\n          <GifGridComponent key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}